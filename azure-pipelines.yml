strategy:
  matrix:
    Linux:
      imageName: 'ubuntu-latest'
    macOS:
      imageName: 'macOS-latest'
    Windows:
      imageName: 'windows-latest'
      
trigger:
- master

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: 'Release'

steps:
- task: CredScan@2
  displayName: CredScan
  inputs:
    toolMajorVersion: 'V2'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: PoliCheck@1
  displayName: PoliCheck
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: custom
    custom: msbuild
    arguments: './sdk/SdkSamples.sln /t:Build /p:Configuration=$(buildConfiguration)'
    
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0 
  displayName: 'Component Detection'
  
- task: BinSkim@3
  displayName: BinSkim
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    AnalyzeTarget: 'artifacts\$(buildConfiguration)\*.dll;'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
